version: '3.8'

services:
  # PostgreSQL データベース（本番用）
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sensechat}
      - POSTGRES_USER=${POSTGRES_USER:-sensechat}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sensechat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sensechat} -d ${POSTGRES_DB:-sensechat}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis（本番用）
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - sensechat-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Nginx リバースプロキシ
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - sensechat-network
    restart: unless-stopped

  # フロントエンド（本番用）
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost}
    networks:
      - sensechat-network
    restart: unless-stopped

  # バックエンド（本番用）
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-sensechat}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sensechat}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - USERS_CONFIG=/app/config/users.json
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=false
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - DEFAULT_LLM_PROVIDER=${DEFAULT_LLM_PROVIDER:-openai_gpt4}
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sensechat-network
    restart: unless-stopped

networks:
  sensechat-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
